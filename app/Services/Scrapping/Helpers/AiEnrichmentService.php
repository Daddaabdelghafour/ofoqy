<?php

namespace App\Services\Scrapping\Helpers;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Cache;

class AiEnrichmentService
{

    protected $apiKey;
    protected $model;
    protected $baseUrl;
    protected $enabled;

    public function __construct()
    {
        $this->apiKey = config('services.openrouter.api_key', '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');
        $this->model = config('services.openrouter.model');
        $this->baseUrl = config('services.openrouter.api_url', 'https://openrouter.ai/api/v1/chat/completions');
        $this->enabled = true;

        // Log de diagnostic au d√©marrage du service
        ScrapingHelper::logScrapping('debug', "üöÄ AiEnrichmentService initialis√© avec:");
        ScrapingHelper::logScrapping('debug', "  - API URL: " . $this->baseUrl);
        ScrapingHelper::logScrapping('debug', "  - Mod√®le: " . $this->model);
        ScrapingHelper::logScrapping('debug', "  - API Key: " . (empty($this->apiKey) ? "MANQUANTE ‚ùå" : "Pr√©sente ‚úÖ [" . substr($this->apiKey, 0, 5) . "..." . substr($this->apiKey, -5) . "]"));
        ScrapingHelper::logScrapping('debug', "  - Statut: " . ($this->enabled ? "Activ√© ‚úÖ" : "D√©sactiv√© ‚ùå"));
    }

    public function enrichUniversityData(array $scrapedData): array
    {

        if (!$this->enabled) {
            ScrapingHelper::logScrapping("warning", "‚ö†Ô∏è Enrichissement AI d√©sactiv√© par configuration");
            return $scrapedData;
        }

        if (!$this->apiKey) {
            ScrapingHelper::logScrapping("error", "üîë Cl√© API OpenRouter manquante - v√©rifiez OPENROUTER_API_KEY dans .env");
            return $scrapedData;
        }

        //check cache to save API Calls
        /*
         $cacheKey = 'ai_enrichment' . md5(json_encode($scrapedData));
         if(Cache::has($cacheKey)){
             ScrapingHelper::logScrapping('info', "‚úÖ Utilisation donn√©es AI en cache pour: " . ($scrapedData['nom'] ?? 'unknown'));
             return Cache::get($cacheKey);
         }
         */
        try {
            ScrapingHelper::logScrapping('debug', "üîÑ D√©marrage enrichissement AI pour: " . ($scrapedData['nom'] ?? $scrapedData['slug'] ?? 'unknown'));

            //pr√©parer la prompt 
            $prompt = $this->buildUniversityPrompt($scrapedData);
            ScrapingHelper::logScrapping('debug', "üìù Prompt g√©n√©r√©: " . strlen($prompt) . " caract√®res");

            //Configuration du mod√®le pour l'appel
            ScrapingHelper::logScrapping('debug', "üì° Appel API OpenRouter avec mod√®le: " . $this->model);
            $response = $this->callOpenRouterApi($prompt);
            ScrapingHelper::logScrapping('debug', "üì© R√©ponse re√ßue: " . strlen($response) . " caract√®res");

            // Enrichissement des donn√©es .
            $enrichData = $this->parseAiResponse($response, $scrapedData);
            ScrapingHelper::logScrapping('debug', "üîç Donn√©es enrichies: " . count($enrichData) . " champs");

            //Sauvegarde dans le cache pour ne pas trop consommer les api calls et pour avoir des temps de r√©ponses rapide
            //Cache::put($cacheKey,$enrichData,now()->addDays(7));

            ScrapingHelper::logScrapping('info', "‚úÖ Enrichissement AI r√©ussi pour: " . ($scrapedData['nom'] ?? 'unknown'));
            return $enrichData;


        } catch (\Exception $e) {
            ScrapingHelper::logScrapping('error', "‚ùå Erreur enrichissement AI: " . $e->getMessage());
            ScrapingHelper::logScrapping('error', "‚ö†Ô∏è Trace: " . $e->getTraceAsString());
            return $scrapedData; // Retourner les donn√©es originales en cas d'erreur
        }
    }

    public function determineHasConcours(array $scrapedData)
    {

        if (!$this->enabled) {
            ScrapingHelper::logScrapping("warning", "‚ö†Ô∏è Enrichissement AI d√©sactiv√© par configuration");
            return $this->fallbackDetectConcours($scrapedData);
        }

        if (!$this->apiKey) {
            ScrapingHelper::logScrapping("error", "üîë Cl√© API OpenRouter manquante - v√©rifiez OPENROUTER_API_KEY dans .env");
            return $this->fallbackDetectConcours($scrapedData);
        }

        $cacheKey = 'ai_concours' . md5(json_encode([
            'slug' => $scrapedData['slug'] ?? '',
            'nom' => $scrapedData['nom'] ?? '',
            'type' => $scrapedData['type'] ?? '',
            'conditions' => substr($scrapedData['conditions_admission'] ?? '', 0, 50)
        ]));

        if (Cache::has($cacheKey)) {
            ScrapingHelper::logScrapping('debug', "üìã Utilisation cache pour d√©tection concours: " . ($scrapedData['nom'] ?? $scrapedData['slug'] ?? 'unknown'));
            return Cache::get($cacheKey);
        }

        try {
            $slug = $scrapedData['slug'] ?? '';
            $nom = $scrapedData['nom'] ?? '';
            $type = $scrapedData['type'] ?? '';
            $conditions = $scrapedData['conditions_admission'] ?? '';

            ScrapingHelper::logScrapping('debug', "üîç Analyse pour d√©tection concours: " . $slug);

            if (str_contains($slug, 'est-')) {
                ScrapingHelper::logScrapping('debug', "‚öôÔ∏è EST d√©tect√© dans slug: admission sur dossier");
                return false;
            }

            if (
                str_contains($slug, 'encg-') || str_contains($slug, 'ensa-') ||
                str_contains($slug, 'ensam-') || str_contains($slug, 'ehtp') ||
                str_contains($slug, 'enim') || str_contains($slug, 'ensem')
            ) {
                ScrapingHelper::logScrapping('debug', "‚öôÔ∏è √âcole d'ing√©nieurs publique d√©tect√©e: concours requis");
                return true;

            }

            // Analyse AI
            ScrapingHelper::logScrapping('debug', "ü§ñ Pas de r√®gle directe, utilisation AI pour d√©terminer concours");

            $prompt = <<<EOT
Analyse les informations suivantes sur une √©cole/universit√© au Maroc et d√©termine si l'admission se fait par concours ou sur dossier:

Nom: $nom
Type: $type
Slug: $slug
Conditions d'admission: $conditions

En te basant sur ces informations et tes connaissances du syst√®me √©ducatif marocain, indique si l'√©cole utilise un concours d'admission (true) ou seulement une s√©lection sur dossier (false).
R√©ponds UNIQUEMENT par true ou false.
EOT;

            ScrapingHelper::logScrapping('debug', "üìù Prompt concours g√©n√©r√©: " . strlen($prompt) . " caract√®res");
            $response = $this->callOpenRouterApi($prompt);
            ScrapingHelper::logScrapping('debug', "üì© R√©ponse concours: " . $response);

            $result = trim(strtolower($response));

            // Extract just true/false from potentially verbose responses
            if (strpos($result, 'true') !== false) {
                $result = true;
            } elseif (strpos($result, 'false') !== false) {
                $result = false;
            } else {
                // Fallback if AI response is unclear
                ScrapingHelper::logScrapping('warning', "‚ö†Ô∏è R√©ponse AI non claire pour concours, utilisation fallback");
                $result = $this->fallbackDetectConcours($scrapedData);
            }

            Cache::put($cacheKey, $result, now()->addDays(7));

            ScrapingHelper::logScrapping('info', "ü§ñ AI a d√©termin√©: " . ($result ? "concours requis" : "admission sur dossier"));
            return $result;

        } catch (\Exception $e) {
            ScrapingHelper::logScrapping('error', "‚ùå Erreur AI d√©tection concours: " . $e->getMessage());
            ScrapingHelper::logScrapping('error', "‚ö†Ô∏è Trace: " . $e->getTraceAsString());
            return $this->fallbackDetectConcours($scrapedData);
        }
    }

    private function fallbackDetectConcours(array $scrapedData): bool
    {
        $slug = strtolower($scrapedData['slug'] ?? '');
        $nom = strtolower($scrapedData['nom'] ?? '');
        $type = strtolower($scrapedData['type'] ?? '');

        ScrapingHelper::logScrapping('debug', "‚öôÔ∏è M√©thode fallback d√©tection concours pour: " . $slug);

        // EST = PAS de concours (admission sur dossier)
        if (str_contains($slug, 'est-') || str_contains($nom, '√©cole sup√©rieure de technologie')) {
            ScrapingHelper::logScrapping('debug', "‚öôÔ∏è EST d√©tect√©: admission sur dossier (fallback)");
            return false;
        }

        // √âcoles d'ing√©nieurs publiques = concours
        if (preg_match('/^(encg|ensa|ensam|ehtp|enim|ensem|emines|emi)[-_]/', $slug)) {
            ScrapingHelper::logScrapping('debug', "‚öôÔ∏è √âcole d'ing√©nieurs publique: concours requis (fallback)");
            return true;
        }

        // Priv√©es g√©n√©ralement = dossier, sauf exceptions
        if (
            str_contains($slug, 'hem') || str_contains($slug, 'mundiapolis') ||
            str_contains($slug, 'universiapolis') || str_contains($slug, 'privee')
        ) {
            ScrapingHelper::logScrapping('debug', "‚öôÔ∏è √âcole priv√©e: admission sur dossier (fallback)");
            return false;
        }

        // D√©faut: publique = concours, priv√©e = dossier
        ScrapingHelper::logScrapping('debug', "‚öôÔ∏è R√®gle par d√©faut selon type: " . $type);
        return $type === 'publique';
    }


    private function buildUniversityPrompt(array $scrapedData)
    {
        $nom = $scrapedData['nom'] ?? 'Non sp√©cifi√©';
        $slug = $scrapedData['slug'] ?? 'Non sp√©cifi√©';
        $type = $scrapedData['type'] ?? 'Non sp√©cifi√©';
        $localisation = $scrapedData['localisation'] ?? 'Non sp√©cifi√©';
        $siteWeb = $scrapedData['site_web'] ?? 'Non sp√©cifi√©';
        $formations = implode(", ", $scrapedData['formations_proposees'] ?? []);
        $conditions = $scrapedData['conditions_admission'] ?? 'Non sp√©cifi√©';
        $groupeParent = $scrapedData['groupe_parent'] ?? 'Non sp√©cifi√©';

        return <<<EOT
[FORMAT STRICT] R√âPONDS UNIQUEMENT AVEC UN OBJET JSON VALIDE, sans texte avant ou apr√®s.

Contexte : Tu es un expert du syst√®me d'enseignement sup√©rieur marocain. Analyse cette institution :

- Nom : $nom
- Slug : $slug
- Type : $type
- Localisation : $localisation
- Site web : $siteWeb
- Groupe/R√©seau : $groupeParent
- Formations : $formations
- Conditions : $conditions

INSTRUCTIONS SP√âCIALES :

1. Recherche et fournis l'ANN√âE DE CR√âATION. Si incertain, applique ces r√®gles :
   - ENCG : entre 2003 et 2011 selon la ville
   - ENSA : entre 2000 et 2008 selon la ville
   - EST : entre 1990 et 2000 selon la ville
   - HEM : 1988
   - EMSI : 1986
   - √âcoles priv√©es r√©centes : apr√®s 2010
   - Ne jamais renvoyer null pour annee_creation

2. SEUILS D'ADMISSION :
   - Inclure uniquement les seuils les plus r√©cents disponibles (ex : 2024, 2025)
   - Chaque seuil doit √™tre un objet associant ann√©e et valeurs par fili√®re, exemple :
     {
       "2025": {"Sciences Math√©matiques": "14.75", "Sciences Physiques": "15.20"},
       "2024": {"Sciences Math√©matiques": "14.50", "Sciences Physiques": "15.00"}
     }
   - Seuils types : Sciences Math (13-16), Physiques (14-17), √âconomie (15-17)

3. D√âROULEMENT DU CONCOURS :
   - Donne une description synth√©tique du d√©roulement typique du concours (√©preuves, phases, dur√©e)
   - Si information inconnue, donne une description g√©n√©rale des concours similaires dans le syst√®me marocain

4. Recherche dans ta base interne et connaissances les informations les plus √† jour et fiables (simule une recherche approfondie sur les sites officiels, universit√©s, r√©seaux ENSA, minist√®res...)

RENVOIE UN OBJET JSON AVEC CETTE STRUCTURE EXACTE :

{
  "type": "publique",
  "concours": true,
  "nombre_annees_etude": 5,
  "universite_rattachement": "R√©seau ENSA",
  "annee_creation": 2005,
  "accreditation": true,
  "bac_obligatoire": true,
  "etat_postulation": "ouvert",
  "mission_objectifs": "Former des ing√©nieurs hautement qualifi√©s dans les domaines techniques",
  "seuils_admission": {
    "2025": {
      "Sciences Math√©matiques": "14.75",
      "Sciences Physiques": "15.20"
    },
    "2024": {
      "Sciences Math√©matiques": "14.50",
      "Sciences Physiques": "15.00"
    }
  },
  "deroulement_concours": "Le concours comprend une √©preuve √©crite de math√©matiques, une √©preuve de physique, suivie d'un oral pour les candidats s√©lectionn√©s. La dur√©e totale est d'environ 4 heures pour l‚Äô√©crit, avec l‚Äôoral sur plusieurs jours."
}

R√àGLES IMP√âRATIVES :

- Tous les champs doivent √™tre remplis, jamais null.
- Pour "type" : "publique" ou "priv√©e" uniquement.
- Pour "concours" : true ou false uniquement.
- Pour "etat_postulation" : "ouvert", "ferm√©" ou "prochainement" uniquement.
- "annee_creation" doit toujours √™tre fournie (ann√©e estim√©e si n√©cessaire).
- Le JSON doit √™tre strictement format√© avec guillemets doubles uniquement.
- Ne rien √©crire en dehors du JSON.

EOT;


    }

    private function callOpenRouterApi(string $prompt)
    {
        // FIX: Correction de l'erreur dans l'en-t√™te Authorization - ajout d'un espace apr√®s 'Bearer'
        ScrapingHelper::logScrapping('debug', "üì° Appel API OpenRouter: URL=" . $this->baseUrl);

        $response = Http::withHeaders([
            'Authorization' => 'Bearer ' . $this->apiKey, // CORRECTION: espace ajout√© apr√®s Bearer
            'Content-Type' => 'application/json',
            'HTTP-Referer' => config('app.url'),
            'X-Title' => 'University Data Enrichment',
        ])->post($this->baseUrl, [
                    'model' => $this->model,
                    'messages' => [
                        ['role' => 'system', 'content' => 'Tu es un expert en √©ducation sup√©rieure au Maroc qui fournit des informations factuelles pr√©cises.'],
                        ['role' => 'user', 'content' => $prompt]
                    ],
                    'temperature' => 0.2,
                    'max_tokens' => 5000
                ]);

        ScrapingHelper::logScrapping('debug', "üì° Statut r√©ponse API: " . $response->status());

        if ($response->successful()) {
            $content = $response->json('choices.0.message.content') ?? '';
            ScrapingHelper::logScrapping('debug', "‚úÖ R√©ponse API r√©ussie: " . substr($content, 0, 50) . "...");
            return $content;
        }

        ScrapingHelper::logScrapping('error', "‚ö†Ô∏è Erreur r√©ponse API: " . json_encode($response->json()));
        throw new \Exception("Erreur API OpenRouter: " . ($response->json('error.message') ?? 'Erreur inconnue'));
    }


    private function parseAiResponse(string $aiResponse, array $originalData)
    {
        try {
            ScrapingHelper::logScrapping('debug', "üîç Parsing r√©ponse AI: " . substr($aiResponse, 0, 50) . "...");

            // Log full response for debugging
            ScrapingHelper::logScrapping('debug', "üìÑ R√©ponse brute: [" . $aiResponse . "]");

            if (empty(trim($aiResponse))) {
                ScrapingHelper::logScrapping('warning', "‚ö†Ô∏è R√©ponse API vide");
                throw new \Exception("R√©ponse API vide");
            }

            if (preg_match('/\{.*\}/s', $aiResponse, $matches)) {
                $jsonStr = $matches[0];
                ScrapingHelper::logScrapping('debug', "‚úÖ JSON extrait: " . substr($jsonStr, 0, 50) . "...");
                $aiData = json_decode($jsonStr, true);
            } else {
                ScrapingHelper::logScrapping('warning', "‚ö†Ô∏è Aucun JSON trouv√© dans la r√©ponse");
                throw new \Exception("Format de r√©ponse AI non reconnu - pas de JSON");
            }

            if (!$aiData || !is_array($aiData)) {
                ScrapingHelper::logScrapping('error', "‚ùå JSON invalide: " . $jsonStr);
                throw new \Exception("R√©ponse AI invalide: impossible de parser le JSON");
            }

            $result = $originalData;
            $fieldsAdded = 0;

            foreach ($aiData as $key => $value) {
                // Special handling for admission thresholds
                if ($key === 'seuils_admission' && !empty($value) && is_array($value)) {
                    // Verify if the structure is already by year
                    $hasYearKeys = false;
                    foreach (array_keys($value) as $possibleYear) {
                        if (is_numeric($possibleYear) && strlen($possibleYear) == 4) {
                            $hasYearKeys = true;
                            break;
                        }
                    }

                    // If not organized by year, restructure it
                    if (!$hasYearKeys) {
                        ScrapingHelper::logScrapping('debug', "üîÑ Restructuration des seuils d'admission par ann√©e");
                        // Use current year as default
                        $currentYear = date('Y');
                        $value = [$currentYear => $value];
                    }

                    if (empty($result[$key])) {
                        $result[$key] = $value;
                        $fieldsAdded++;
                        ScrapingHelper::logScrapping('debug', "AI a ajout√© des seuils d'admission: " . json_encode($value));
                    }
                } elseif (!empty($value) && (!isset($result[$key]) || empty($result[$key]))) {
                    $result[$key] = $value;
                    $fieldsAdded++;
                    ScrapingHelper::logScrapping('debug', "AI a ajout√©/compl√©t√©: {$key} = " . (is_array($value) ? json_encode($value) : $value));
                }
            }

            ScrapingHelper::logScrapping('info', "‚úÖ AI a enrichi {$fieldsAdded} champs");
            return $result;

            // REMOVE THIS UNREACHABLE CODE
            // throw new \Exception("Format de r√©ponse AI non reconnu");

        } catch (\Exception $e) {
            ScrapingHelper::logScrapping('error', "Erreur lors du parsing de la r√©ponse AI: " . $e->getMessage());
            return $originalData;
        }
    }
}